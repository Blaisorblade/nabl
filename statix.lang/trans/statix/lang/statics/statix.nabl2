module statix/lang/statics/statix

imports

  signatures/statix/lang/-

signature

  sorts
    SKind
    CKind

  constructors
    SimpleSort : SKind
    SortAlias  : SKind

    DeclaredC : CKind
    DerivedC  : CKind

  namespaces
    C
    Lang
    Lbl
    Ns
    Op
    Rel
    Sort
    Query

  relations
    in : Type * TClass

  name resolution
    labels P I
    well-formedness P* I?
    order D < P, I < P

rules

  init ^ (s) :=
    new s.

/******************************************************************
 * Modules                                                        *
 ******************************************************************/

  [[ Module(x, sections) ^ (s) ]] :=
    new s',
    Lang{x} <- s, Lang{x} ===> s', @x.decl := Lang{x},
    Lang{x} -> s, Lang{x} <=== s',
    Sections[[ sections ^ (s') ]].

  Sections[[ sections ^ (s') ]] :=
    Map1[[ sections ^ (s') ]],
    (D(s')/C    lsect/name (W(s')/C    minus D(s')/C   )) subseteq 0 | error $[Duplicate constraint [NAME]] @NAMES,
    distinct/name D(s')/C | error $[Duplicate constraint [NAME]] @NAMES,
    (D(s')/Lbl  lsect/name (W(s')/Lbl  minus D(s')/Lbl )) subseteq 0 | error $[Duplicate label [NAME]] @NAMES,
    distinct/name D(s')/Lbl | error $[Duplicate label [NAME]] @NAMES,
    (D(s')/Ns   lsect/name (W(s')/Ns   minus D(s')/Ns  )) subseteq 0 | error $[Duplicate namespace [NAME]] @NAMES,
    distinct/name D(s')/Ns | error $[Duplicate namespace [NAME]] @NAMES,
    (D(s')/Op   lsect/name (W(s')/Op   minus D(s')/Op  )) subseteq 0 | error $[Duplicate constructor [NAME]] @NAMES,
    distinct/name D(s')/Op | error $[Duplicate constructor [NAME]] @NAMES,
    (D(s')/Rel  lsect/name (W(s')/Rel  minus D(s')/Rel )) subseteq 0 | error $[Duplicate relation [NAME]] @NAMES,
    distinct/name D(s')/Rel | error $[Duplicate relation [NAME]] @NAMES,
    (D(s')/Sort lsect/name (W(s')/Sort minus D(s')/Sort)) subseteq 0 | error $[Duplicate sort [NAME]] @NAMES,
    distinct/name D(s')/Sort | error $[Duplicate sort [NAME]] @NAMES.

  [[ Signature(sigs) ^ (s) ]] :=
    Map1[[ sigs ^ (s) ]].

  [[ Rules(rs) ^ (s) ]] :=
    Map1[[ rs ^ (s) ]].

/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

  [[ Constraints(cs) ^ (s) ]] :=
    Map1[[ cs ^ (s) ]].

  [[ CDecl(ind, x, type) ^ (s) ]] :=
    [[ ind ]],
    [[ type ^ (s) : ty ]],                     // types
    C{x} <- s, @x.decl := C{x},                // decl
    C{x} : ty !!,
    C{x}.ind := ind !!,
    C{x}.kind := DeclaredC() !!.

  [[ InductiveC() ]].
  [[ CoinductiveC() ]] := false | error "Co-inductive constraints are not yet supported.".

  [[ CDeriveMap(x, x', lifts) ^ (s) ]] :=
    C{x'} -> s, C{x'} |-> d, @x'.decl := d,
    d : ty, ty != FUN(_, _) | error "Use `c maps c(...) = ...` for functional constraints." @x,
    d.ind := ind,

    tys is `in-types` of ty,
    lifts <`lifts-some`? () | error "At least one argument must be lifted.",
    tys' is `lift-types` of (lifts, tys),

    C{x} <- s, @x.decl := C{x},
    C{x} : PRED(tys') !!,
    C{x}.ind := ind !!,
    C{x}.kind := DerivedC() !!.

  [[ FDeriveMap(x, x', inlifts, outlift) ^ (s) ]] :=
    C{x'} -> s, C{x'} |-> d, @x'.decl := d,
    d : ty, ty != PRED(_) | error "Use `c maps c(...)` for non-functional constraints." @x,
    d.ind := ind,

    intys is `in-types` of ty,
    outtys is `out-types` of ty,
    inlifts <`lifts-some`? () | error "At least one input argument must be lifted.",
    outlifts is `lift-to-lifts` of outlift,
    intys' is `lift-types` of (inlifts, intys),
    outtys' is `lift-types` of (outlifts, outtys),

    C{x} <- s, @x.decl := C{x},
    C{x} : FUN(intys', outtys') !!,
    C{x}.ind := ind !!,
    C{x}.kind := DerivedC() !!.

  [[ Rule(h, bvs, body) ^ (s) ]] :=
    new s_rule, s_rule ---> s,
    distinct/name D(s_rule)/Var | error $[Duplicate local variable [NAME]] @NAMES,
    RuleHead[[ h ^ (s_rule, s_body) ]],
    new s_body, s_body ---> s_rule,
    distinct/name D(s_body)/Var | error $[Duplicate body variable [NAME]] @NAMES,
    (D(s_body) lsect/name D(s_rule)) subseteq 0 | error $[Shadowing local variable [NAME]] @NAMES,
    Map1(VarDecl)[[ bvs ^ (s_body) ]],
    [[ body ^ (s_body) ]].

  RuleHead[[ C(x, args) ^ (s_rule, _) ]] :=
    C{x} -> s_rule, C{x} |-> d, @x.decl := d,
    d.kind := DeclaredC() | error "Rules can only be defined for declared constraints.",
    d : ty, ty != FUN(_, _) | error "Use `c(...) = ... | ...` for functional constraints." @x,
    tys is `in-types` of ty,
    Map1T(Match)[[ args ^ (s_rule) : tys ]].

  RuleHead[[ F(x, inargs, outarg) ^ (s_rule, s_body) ]] :=
    C{x} -> s_rule, C{x} |-> d, @x.decl := d,
    d.kind := DeclaredC() | error "Rules can only be defined for declared constraints.",
    d : ty, ty != PRED(_) | error "Use `c(...) | ...` for non-functional constraints." @x,
    intys is `in-types` of ty,
    outty is `out-type` of ty,
    Map1T(Match)[[ inargs ^ (s_rule) : intys ]],
    Build[[ outarg ^ (s_body) : outty ]].

  [[ C(x, args) ^ (s) ]] :=
    C{x} -> s, C{x} |-> d, @x.decl := d,
    d : ty,
    tys is `inout-types` of ty,
    Map1T(Build)[[ args ^ (s) : tys ]].

  [[ LC(x) ^ (s) : ty ]] :=
    C{x} -> s, C{x} |-> d, @x.decl := d,
    d : ty.

  Term(V)[[ COp(x, args) ^ (s) : outty ]] :=
    C{x} -> s, C{x} |-> d, @x.decl := d,
    d : ty, ty != PRED(_) | error "Inline notation can only be used for functional constraints.",
    intys is `in-types` of ty,
    outty' is `out-type` of ty, ?-Sub(outty', outty),
    Map1T(Term(V))[[ args ^ (s) : intys ]].

/******************************************************************
 * Relations                                                      *
 ******************************************************************/

  [[ Relations(rdecls) ^ (s) ]] :=
    Map1[[ rdecls ^ (s) ]].

  [[ RelDecl(rel, type) ^ (s) ]] :=
    [[ type ^ (s) : ty ]],
    RelDecl[[ rel ^ (s) : ty ]].

  [[ CTellRel(rel, ts, st) ^ (s) ]] :=
    RelRef[[ rel ^ (s) : ty ]],
    tys is `inout-types` of ty,
    Map1T(Build)[[ ts ^ (s): tys ]],
    Build[[ st ^ (s) : SCOPE() ]].

  [[ CAskRel(rel, ts, st) ^ (s) ]] :=
    RelRef[[ rel ^ (s) : ty ]],
    tys is `inout-types` of ty,
    Map1T(Build)[[ ts ^ (s): tys ]],
    Build[[ st ^ (s) : SCOPE() ]].

  Term(V)[[ AskRelOp(rel, ts, st) ^ (s) : outty ]] :=
    RelRef[[ rel ^ (s) : ty ]], ty != PRED(_) | error "Inline notation can only be used for functional relations.",
    intys is `in-types` of ty,
    outty is `out-type` of ty,
    Map1T(Term(V))[[ ts ^ (s) : intys ]],
    Term(V)[[ st ^ (s) : SCOPE() ]].

  RelDecl[[ Rel(x) ^ (s) : ty ]] :=
    Rel{x} <- s, @x.decl := Rel{x},
    Rel{x} : ty !.

  RelRef[[ Rel(x) ^ (s) : ty ]] :=
    Rel{x} -> s, Rel{x} |-> d, @x.decl := d,
    d : ty.

  RelRef[[ Decl() ^ (s) : PRED([OCCURRENCE()]) ]].

/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

  [[ CTrue() ^ (_) ]].

  [[ CFalse() ^ (_) ]].

  [[ CConj(c1, c2) ^ (s) ]] :=
    [[ c1 ^ (s) ]],
    [[ c2 ^ (s) ]].

  [[ CNew(vs) ^ (s) ]] :=
    Map1t(BuildVar)[[ vs ^ (s) : SCOPE() ]].

  [[ CTermId(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : _ ]],
    Build[[ t2 ^ (s) : TERM_ID() ]].

  [[ CEqual(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]].

  [[ CInequal(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]].

  [[ LTrue() ^ (_) : PRED(_) ]].

  [[ LFalse() ^ (_) : PRED(_) ]].

  [[ LLam(ps, vs, c) ^ (s) : PRED(tys) ]] :=
    new s', s' ---> s,
    Map1T(Match)[[ ps ^ (s') : tys ]],
    Map1(VarDecl)[[ vs ^ (s') ]],
    [[ c ^ (s') ]].

  Term(V)[[ NewOp() ^ (s) : ty ]] := ?-Sub(SCOPE(), ty).

  Term(V)[[ TermIdOp(t) ^ (s) : ty ]] := ?-Sub(TERM_ID(), ty),
    Term(V)[[ t ^ (s) : _ ]].

/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

  [[ Namespaces(nss) ^ (s) ]] :=
    Map1[[ nss ^ (s) ]].

  [[ NsDecl(x, sorts) ^ (s) ]] :=
    Ns{x} <- s, @x.decl := Ns{x},
    Map1T(SortRef)[[ sorts ^ (s) : tys ]],
    Ns{x} : NS(tys) !.

  [[ NameResolution(params) ^ (s) ]] :=
    Map1[[ params ^ (s) ]].

  [[ Labels(lbls) ^ (s) ]] :=
    Map1(LabelDecl)[[ lbls ^ (s) ]].

  LabelDecl[[ Rel(x) ^ (s) ]] :=
    Lbl{x} <- s, @x.decl := Lbl{x},
    Rel{x} <- s.

  [[ NamespaceQuery(x, filter, min) ^ (s) ]] :=
    Ns{x} -> s, Ns{x} |-> d, @x.decl := Ns{x},
    [[ filter ^ (s) ]],
    [[ min ^ (s) ]].

  [[ NamespaceFilter(lp) ^ (s) ]] :=
    [[ lp ^ (s) : PRED([LIST(LABEL())]) ]].

  [[ NamespaceMin(lp) ^ (s) ]] :=
    [[ lp ^ (s) : PRED([LABEL(), LABEL()]) ]].

  [[ CPathMatch(re, p) ^ (s) ]] :=
    LabelRE[[ re ^ (s) ]],
    Build[[ p ^ (s) : LIST(LABEL()) ]].

  [[ CPathLt(prs, p1, p2) ^ (s) ]] :=
    Build[[ p1 ^ (s) : LABEL() ]],
    Build[[ p2 ^ (s) : LABEL() ]],
    Map1[[ prs ^ (s) ]].

  [[ LPathMatch(re) ^ (s) : PRED([LIST(LABEL())]) ]] :=
    LabelRE[[ re ^ (s) ]].

  [[ LPathLt(prs) ^ (s) : PRED([LABEL(), LABEL()]) ]] :=
    Map1[[ prs ^ (s) ]].

  [[ LabelPair(lbl1, lbl2) ^ (s) ]] :=
    LabelRef[[ lbl1 ^ (s) ]],
    LabelRef[[ lbl2 ^ (s) ]].

  LabelRE[[ Empty() ^ (_) ]].
  LabelRE[[ Epsilon() ^ (_) ]].
  LabelRE[[ lbl@Label(_) ^ (s) ]] :=
    LabelRef[[ lbl ^ (s) ]].
  LabelRE[[ Closure(re) ^ (s) ]] :=
    LabelRE[[ re ^ (s) ]].
  LabelRE[[ Neg(re) ^ (s) ]] :=
    LabelRE[[ re ^ (s) ]].
  LabelRE[[ Concat(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].
  LabelRE[[ And(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].
  LabelRE[[ Or(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].

  LabelDecl[[ Label(x) ^ (s) ]] :=
    Lbl{x} <- s, @x.decl := Lbl{x},
    Rel{x} <- s, Rel{x} : PRED([SCOPE()]).

  LabelRef[[ Label(x) ^ (s) ]] :=
    Lbl{x} -> s, Lbl{x} |-> d, @x.decl := d.

  LabelRef[[ EOP() ^ (s) ]].

  [[ CTellEdge(t1, lbl, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : SCOPE() ]],
    LabelRef[[ lbl ^ (s) ]],
    Build[[ t2 ^ (s) : SCOPE() ]].

  [[ CPathSrc(pt, st) ^ (s) ]] :=
    Build[[ pt ^ (s) : PATH() ]],
    Build[[ st ^ (s) : SCOPE() ]].

  [[ CPathDst(pt, dt) ^ (s) ]] :=
    Build[[ pt ^ (s) : PATH() ]],
    Build[[ dt ^ (s) : SCOPE() ]].

  [[ CPathScopes(pt, st) ^ (s) ]] :=
    Build[[ pt ^ (s) : PATH() ]],
    Build[[ st ^ (s) : LIST(SCOPE()) ]].

  [[ CPathLabels(pt, lt) ^ (s) ]] :=
    Build[[ pt ^ (s) : PATH() ]],
    Build[[ lt ^ (s) : LIST(LABEL()) ]].

  Term(V)[[ PathSrcOp(t) ^ (s) : ty ]] := ?-Sub(SCOPE(), ty),
    Term(V)[[ t ^ (s) : PATH() ]].
  Term(V)[[ PathScopesOp(t) ^ (s) : ty ]] := ?-Sub(LIST(SCOPE()), ty),
    Term(V)[[ t ^ (s) : PATH() ]].
  Term(V)[[ PathLabelsOp(t) ^ (s) : ty ]] := ?-Sub(LIST(LABEL()), ty),
    Term(V)[[ t ^ (s) : PATH() ]].
  Term(V)[[ PathDstOp(t) ^ (s) : ty ]] := ?-Sub(SCOPE(), ty),
    Term(V)[[ t ^ (s) : PATH() ]].

  Term(V)[[ Occurrence(ns, ts, pos) ^ (s) : ty ]] := ?-Sub(OCCURRENCE(), ty),
    Ns{ns} -> s, Ns{ns} |-> d, @ns.decl := d,
    d : NS(tys),
    Map1T(Term(V))[[ ts ^ (s) : tys ]],
    Pos(V)[[ pos ^ (s) : _ ]].

  Pos(V)[[ NoId() ^ (s) : ty ]] := !-Sub(TERM_ID(), ty).
  Pos(V)[[ t ^ (s) : ty ]] :=
    Term(V)[[ t ^ (s) : ty ]].

/******************************************************************
 * Resolve & Query
 ******************************************************************/

  [[ CResolveQuery(target, filter, min, st, pst) ^ (s) ]] :=
    [[ target ^ (s, wfty, resty) ]],
    [[ filter ^ (s, wfty) ]],
    [[ min ^ (s, wfty) ]],
    Build[[ st ^ (s) : SCOPE() ]],
    Build[[ pst ^ (s) : LIST(resty) ]].

  [[ NoTarget() ^ (s, wfty, outty) ]] :=
    wfty == SCOPE(),
    outty == PATH().

  [[ RelTarget(rel) ^ (s, wfty, outty) ]] :=
    RelRef[[ rel ^ (s) : rty ]],
    wfty is `in-type` of rty,
    inoutty is `inout-type` of rty,
    outty == TUPLE([PATH(), inoutty]).

  [[ Filter(lp, lt) ^ (s, ty) ]] :=
    [[ lp ^ (s) : PRED([LIST(LABEL())]) ]],
    [[ lt ^ (s) : PRED([ty]) ]].

  [[ Min(lp, lt) ^ (s, ty) ]] :=
    [[ lp ^ (s) : PRED([LABEL(), LABEL()]) ]],
    [[ lt ^ (s) : PRED([ty, ty]) ]].

  [[ ResolveFilter(t) ^ (s, ty) ]] :=
    Build[[ t ^ (s) : ty ]].

  [[ ResolveMin(t) ^ (s, ty) ]] :=
    Build[[ t ^ (s) : ty ]].

/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

  [[ Sorts(sorts) ^ (s) ]] :=
    Map1(SortDecl)[[ sorts ^ (s) ]].

  SortDecl[[ SortDecl(x) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : SORT(Sort{x}) !!,
    Sort{x}.kind := SimpleSort().

  SortDecl[[ SortAlias(x, sort) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : ty !!,
    Sort{x}.kind := SortAlias(),
    SortRef[[ sort ^ (s) : ty ]].

  [[ Constructors(ctors) ^ (s) ]] :=
    Map1[[ ctors ^ (s) ]].

  [[ OpDecl(x, sort) ^ (s) ]] :=
    Op{x} <- s, @x.decl := Op{x},
    Op{x} : ty !!,
    OpSort[[ sort ^ (s) : ty ]].

  [[ SortInj(sort', sort) ^ (s) ]] :=
    SortRef[[ sort' ^ (s) : ty' ]],
    RealSortRef[[ sort ^ (s) : ty ]],
    !-Sub(ty', ty).

  OpSort[[ ConstOp(sort) ^ (s) : OP([], ty) ]] :=
    RealSortRef[[ sort ^ (s) : ty ]].

  OpSort[[ ArrowOp(args, sort) ^ (s) : OP(tys, ty) ]] :=
    Map1T(SortRef)[[ args ^ (s) : tys ]],
    RealSortRef[[ sort ^ (s) : ty ]].

  RealSortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.decl := d,
    d : ty !,
    d.kind := k, k != SortAlias() | error $[Cannot refer to alias [d]].

  SortRef[[ IntSort() ^ (_) : INT() ]].
  SortRef[[ StringSort() ^ (_) : STRING() ]].
  SortRef[[ OccurrenceSort() ^ (_) : OCCURRENCE() ]].
  SortRef[[ PathSort() ^ (_) : PATH() ]].
  SortRef[[ LabelSort() ^ (_) : LABEL() ]].
  SortRef[[ ScopeSort() ^ (_) : SCOPE() ]].
  SortRef[[ TermIdSort() ^ (_) : TERM_ID() ]].
  SortRef[[ TupleSort(sorts) ^ (s) : TUPLE(tys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : tys ]].
  SortRef[[ ListSort(sort) ^ (s) : LIST(ty) ]] :=
    SortRef[[ sort ^ (s) : ty ]].
  SortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.decl := d,
    d : ty.

  [[ SimpleType(sorts) ^ (s) : PRED(intys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : intys ]].

  [[ FunType(insorts, outsorts) ^ (s) : FUN(intys, outtys) ]] :=
    Map1T(SortRef)[[ insorts ^ (s) : intys ]],
    Map1T(SortRef)[[ outsorts ^ (s) : outtys ]].

rules

  VarDecl[[ Var(x) ^ (s) ]] :=
    Var{x} <- s, @x.decl := Var{x},
    Var{x} : ty !, ?-Neg(ty).

  VarDecl[[ Wld() ^ (_) ]].


  Match[[ t ^ (s) : ty ]] :=
    Term(MatchVar)[[ t ^ (s) : ty ]].

  MatchVar[[ Var(x) ^ (s) : ty ]] :=
    Var{x @s} <- s, @x.decl := Var{x @s},
    Var{x @s} : ty' !, ?-Neg(ty'), ?-Sub(ty', ty).

  MatchVar[[ Wld() ^ (_) : _ ]].


  Build[[ t ^ (s) : ty ]] :=
    Term(BuildVar)[[ t ^ (s) : ty ]].

  BuildVar[[ Var(x) ^ (s) : ty ]] :=
    Var{x} -> s, Var{x} |-> d, @x.decl := d,
    d : ty', ?-Sub(ty', ty).

  BuildVar[[ Wld() ^ (_) : _ ]].


  Term(V)[[ v@Var(_) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]].
  Term(V)[[ Wld() ^ (_) : ty ]].
  Term(V)[[ List(ts) ^ (s): ty' ]] := ?-Sub(LIST(ty), ty'),
    Map1t(Term(V))[[ ts ^ (s) : ty ]].
  Term(V)[[ ListTail(ts, t) ^ (s) : ty' ]] := ?-Sub(LIST(ty), ty'),
    Map1t(Term(V))[[ ts ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty' ]].
  Term(V)[[ Tuple(ts) ^ (s) : ty ]] := ?-Sub(TUPLE(tys), ty),
    Map1T(Term(V))[[ ts ^ (s) : tys ]].
  Term(V)[[ Op(x, args) ^ (s) : ty ]] :=
    Op{x} -> s, Op{x} |-> d, @x.decl := Op{x},
    d : OP(tys, ty'), ?-Sub(ty', ty),
    Map1T(Term(V))[[ args ^ (s) : tys ]].
  Term(V)[[ Str(_) ^ (_) : ty ]] := ?-Sub(STRING(), ty).
  Term(V)[[ Int(_) ^ (_) : ty ]] := ?-Sub(INT(), ty).
  Term(V)[[ As(v, t) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty ]].
  Term(V)[[ Ascribe(t, sort) ^ (s) : ty ]] :=
    SortRef[[ sort ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty' ]], ?-Sub(ty', ty).

rules

  Map1t(X)[[ [x|xs] ^ (s) : ty ]] :=
    X[[ x ^ (s) : ty ]],
    Map1t(X)[[ xs ^ (s) : ty ]].

  Map1t(X)[[ [] ^ (s) : _ ]].
