module testsuites/name-resolution/Syntax

imports

  Identifiers

context-free syntax

  Test.ScopeOccurrencesAreEqual = <scope occurrences of <X> and <X> are equal>

  Test.OccurrenceOfXInVarScope = <occurrence of <X> in var scope>

  Test.ResolveXToScopeOccurrenceX = <resolve <X> to scope occurrence <X>>

context-free syntax

  Test.ResolveXToXInSameScope = <resolve <X> to <X> in same scope>

  Test.ResolveXToYInSameScope = <resolve <X> to <Y> in same scope>

  Test.ResolveNs1XToNs2XInSameScope = <resolve ns1 <X> to ns2 <X> in same scope>

  Test.ResolveXToXOrXInSameScope = <resolve <X> to <X> or <X> in same scope>

context-free syntax

  Test.ResolveXToXInParentScope = <resolve <X> to <X> in parent scope>

  Test.ResolveXToXOrXInParentScopes = <resolve <X> to <X> and <X> in parent scopes>

  Test.ResolveXToXInImportScopeNotInParentScope = <resolve <X> to <X> in import scope over <X> parent scope>

context-free syntax

  Test.ResolveXViaY = <resolve <X> via <Y> in <Y> { <X> }>

  Test.ResolveXViaYAndZ = <resolve <X> via <Y> where <Y> imports <Z> in <Z> { <X> }>

context-free syntax

  Test.ResolveYViaTypeOfX = <resolve <Y> via type of <X> in <X> { <Y> } >

context-free syntax

  Test.ImportCycle = <import cycle <X> to <X> >

context-free syntax

  Test.ResolveImplicitCompoundName = <resolve compound <X> to <X> with implicit position>

  Test.ResolveExplicitCompoundName = <resolve compound <X> to <X> with explicit position>

  Test.ResolveAstCompoundName = <resolve ast compound <AstCompoundName> to <AstCompoundName>>

  AstCompoundName.Wrapped = <wrapped <X>>
