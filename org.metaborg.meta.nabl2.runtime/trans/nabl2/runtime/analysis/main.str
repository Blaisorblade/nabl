module nabl2/runtime/analysis/main

imports

  nabl2/api
 
  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-
  nabl2/shared/-

  signatures/nabl2/runtime/analysis/-
  nabl2/runtime/analysis/-
  nabl2/runtime/prelude/-


rules

  nabl2--analyze(pre):
      AnalyzeInitial(resource) -> InitialResult(C, params, config)
    with nabl2--collection-info-msg(|$[Initializing [resource]]);
         labels := <nabl2--labels>;
         wf := <nabl2--labels-wf>;
         order := <nabl2--label-order>;
         res-params := (labels,wf,order);
         rel* := <nabl2--relations>;
         fun* := <nabl2--functions>;
         config := (res-params, rel*, fun*);
         (params,C) := <nabl2--generate-constraint-init(|resource)> resource

  nabl2--analyze(pre):
      AnalyzeUnit(resource,ast,args) -> UnitResult(ast',constraint*)
    with nabl2--collection-info-msg(|$[Preprocessing AST [resource]]);
         ast' := <pre;nabl2--index-ast(|resource)> ast;
         nabl2--collection-info-msg(|$[Generating constraints [resource]]);
         constraint* := <nabl2--generate-constraint-file(|resource,args)> ast'

  nabl2--analyze(pre):
      AnalyzeFinal(resource) -> FinalResult()


  nabl2--analyze(pre):
      CustomInitial(resource) -> result
    where result := <nabl2-custom-analysis-init-hook> resource

  nabl2--analyze(pre):
      CustomUnit(resource,ast,initial) -> result
    where result := <nabl2-custom-analysis-unit-hook> (resource, ast, initial)

  nabl2--analyze(pre):
      CustomFinal(resource,initial,unit*) -> result
    where result := <nabl2-custom-analysis-final-hook(|resource)> (resource, initial, unit*)

