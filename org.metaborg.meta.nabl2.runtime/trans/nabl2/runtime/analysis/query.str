module nabl2/runtime/analysis/query 

imports

  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-
  nabl2/shared/-

  pp/nabl2/runtime/common/-
  signatures/nabl2/runtime/common/-
  signatures/nabl2/runtime/constraints/-

signature

  constructors

    AnalysisToken : Analysis

rules

  /**
   * @type node:Term -> List((ref:Occurrence,decl:Occurrence))
   */
  nabl2--get-ast-resolution =
    prim("SG_get_ast_resolution")

  /**
   * @param key : Term
   * @type node:Term -> value:Term
   */
  nabl2--get-ast-property(|key) =
    prim("SG_get_ast_property",key)

  nabl2--get-ast-params =
    nabl2--get-ast-property(|Params())

  nabl2--get-ast-type =
    nabl2--get-ast-property(|Type())

rules

  /**
   * @type ref:Occurrence -> (decl:Occurrence,Path))
   */
  nabl2--get-ref-resolution =
    prim("SG_get_ref_resolution")

  /**
   * @param key : Term
   * @type decl:Occurrence -> value:Term
   */
  nabl2--get-decl-property(|key) =
    prim("SG_get_decl_property",key)

  nabl2--get-decl-property-by-name(|name) =
    nabl2--get-decl-property(|Property(name))

  /**
   * @param key : Term
   * @type decl:Occurrence -> Type
   */
  nabl2--get-decl-type =
    nabl2--get-decl-property(|Type())

rules

  nabl2--get-ast-analysis: term -> a
    with a := <nabl2--copy-ast-index(|term)> AnalysisToken()

  nabl2--get-resource-analysis: resource -> a
    with idx := TermIndex(resource,0);
         a := <nabl2--set-ast-index(|idx)> AnalysisToken()

  nabl2--analysis-has-errors =
    prim("SG_analysis_has_errors")

  nabl2--get-custom-analysis =
    prim("SG_get_custom_analysis")

rules

  nabl2--get-all-decls(|a) =
    prim("SG_get_all_decls", a)

  nabl2--get-all-refs(|a) =
    prim("SG_get_all_refs", a)

  nabl2--get-all-scopes(|a) =
    prim("SG_get_all_scopes", a)

  nabl2--get-decl-scope(|a) =
    prim("SG_get_decl_scope", a)

  nabl2--get-ref-scope(|a) =
    prim("SG_get_ref_scope", a)

  nabl2--get-scope-decls(|a) =
    prim("SG_get_scope_decls", a)

  nabl2--get-scope-refs(|a) =
    prim("SG_get_scope_refs", a)

  nabl2--get-direct-edges(|a) =
    prim("SG_get_direct_edges", a)

  nabl2--get-direct-edges-inv(|a) =
    prim("SG_get_direct_edges_inv", a)

  nabl2--get-export-edges(|a) =
    prim("SG_get_export_edges", a)

  nabl2--get-export-edges-inv(|a) =
    prim("SG_get_export_edges_inv", a)

  nabl2--get-import-edges(|a) =
    prim("SG_get_import_edges", a)

  nabl2--get-import-edges-inv(|a) =
    prim("SG_get_import_edges_inv", a)

  nabl2--get-visible-decls(|a) =
    prim("SG_get_visible_decls", a)

  nabl2--get-reachable-decls(|a) =
    prim("SG_get_reachable_decls", a)

rules

  nabl2--get-symbolic-facts(|a) =
    prim("SG_get_symbolic_facts", a)

  nabl2--get-symbolic-goals(|a) =
    prim("SG_get_symbolic_goals", a)

rules

  /* FIXME : Indices, origins, and occurrences are brittle
   *
   * - Should it be possible to get anaysis from an occurrence?
   * - Editor resolution requires copying origins whn getting names. This
   *   should probably be more principal
   * - IceDust tries to build occurrences from names only, which fails
   *   for cases like "this", that does not come from the AST. Find out if
   *   IceDust is cutting corners, or we should handle that case differently.
   */

  nabl2--mk-occurrence: t -> Occurrence(DefaultNamespace(), t, index)
    where index := <nabl2--get-ast-index> t

  nabl2--mk-occurrence(|ns): t -> Occurrence(Namespace(ns), t, index)
    where index := <nabl2--get-ast-index> t

  nabl2--mk-occurrence(|ns,ot): t -> Occurrence(Namespace(ns), t, index)
    where index := <nabl2--get-ast-index> ot

  nabl2--occurrence-name: Occurrence(_,name,index) -> name'
    with name' := <try(nabl2--copy-origin(|index))> name

  nabl2--occurrence-ns: Occurrence(ns,_,index) -> ns'
    with ns' := <try(nabl2--copy-origin(|index))> ns

rules

  nabl2--occurrence-index-of(|default-index) =
    if nabl2--is-ground then
      is-NaBL2-Scope
   <+ nabl2--get-ast-index
   <+ !default-index
    else
      fatal-err(|"Cannot get an index of non-ground ")
    end

rules

  nabl2--fresh =
    prim("SG_fresh")

