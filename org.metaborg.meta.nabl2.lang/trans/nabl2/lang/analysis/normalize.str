module nabl2/lang/analysis/normalize

imports

  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-

  signatures/nabl2/lang/common/-
  signatures/nabl2/lang/modules/-
  signatures/nabl2/lang/rules/-
  signatures/nabl2/lang/signatures/-

  nabl2/lang/generation/-
  nabl2/lang/util/-

rules

  normalize =
    normalize-axioms;
    normalize-rule-names;
    normalize-constraints;
    normalize-wildcards;
    normalize-regexes;
    normalize-constructors;
    normalize-arg-matches;
    normalize-rule-vars;
    normalize-messages;
    normalize-indices

rules

  normalize-axioms = try(sometd(normalize-axiom))

  // capture the matched term
  normalize-axiom:
    CGenInitRuleNoConstraint(params,type)
      -> CGenInitRule(params,type, [])

  normalize-axiom:
    CGenMatchRuleNoConstraint(rdef,pattern,params,type)
      -> CGenMatchRule(rdef,pattern,params,type, [])

rules

  normalize-rule-names = try(sometd(normalize-rule-name))

  normalize-rule-name:
    NameNoArgs(name) -> Name(name,[])

rules

  normalize-wildcards =
    try(sometd(
      Rules(map(wlds-to-vars))
    + Functions(map(FunctionDef(id,id,map(wlds-to-vars))))
    ))

  wlds-to-vars = {| NextVar:
    with(var-counter := <new-counter>);
    rules(NextVar: _ -> Var($[nabl2_wld[<next-counter;int-to-string> var-counter]]));
    topdown(try(\ Wld() -> <NextVar> \))
  |}

rules

  normalize-regexes = try(sometd(normalize-regex))

  normalize-regex:
    Option(re) -> Or(Epsilon(),re)

  normalize-regex:
    ConcatDot(re1,re2) -> Concat(re1,re2)

  normalize-regex:
    NonEmpty(re) -> Concat(re,Closure(re))

rules

  normalize-constructors = try(sometd(normalize-opdecl))

  normalize-opdecl:
    NullaryOpDecl(op,sort) -> OpDecl(op, [], sort)

rules

  normalize-arg-matches = try(sometd(normalize-type-match))

  // replace type terms with a variable and an equality constraint
  normalize-type-match:
    CGenMatchRule(rdef,pattern,param,Type(type),clause*)
      -> CGenMatchRule(rdef,pattern,param,Type(<type-var>),
             [CEqual(<type-var>,type,DefaultMessage()),clause*])

rules

  normalize-rule-vars = 
    try(sometd(normalize-free-vars))

  normalize-free-vars:
    CGenInitRule(params,type,clause*)
      -> CGenInitRule(params,type,[NewVars(free-var*),clause*])
    with new-var* := <clauses-new-vars> clause*;
         used-var* := <all-vars> (params,type,clause*);
         free-var* := <diff> (used-var*, [<term-var>,new-var*])

  normalize-free-vars:
    CGenMatchRule(rdef,pattern,params,type,clause*)
      -> CGenMatchRule(rdef,pattern,params,type,[NewVars(free-var*),clause*])
    with new-var* := <clauses-new-vars> clause*;
         bound-var* := <all-vars> (pattern,params,type,new-var*);
         used-var* := <all-vars> clause*;
         free-var* := <diff> (used-var*, bound-var*)

  normalize-free-vars:
    FunDef(name,arg*,clause*)
      -> FunDef(name,arg*,[NewVars(free-var*),clause*])
    with new-var* := <clauses-new-vars> clause*;
         used-var* := <all-vars> clause*;
         free-var* := <diff> (used-var*, [<term-var>,arg*,new-var*])

  clauses-new-vars =
    filter(clause-new-vars); concat

  clause-new-vars: NewScopes(v*) -> v*

rules

  normalize-constraints =
    topdown(try(normalize-constraint));
    topdown(try(CGenInitRule(id,id,flatten-list) + CGenMatchRule(id,id,id,id,flatten-list)))

  normalize-constraint:
    CDeclType(o,ty,prio,msginfo) ->
      CDeclProperty(o,Type(),ty,prio,msginfo)

  normalize-constraint:
    CGen(t1,t2,msginfo) ->
      CGen(t1,Wld(),t2,msginfo)

  normalize-constraint:
    CInst(t1,t2,msginfo) ->
      CInst(t1,Wld(),t2,msginfo)

  normalize-constraint:
    CSetEq(s1,proj,s2,msginfo) ->
      [CSubsetEq(s1,proj,s2,msginfo),CSubsetEq(s2,proj,s1,msginfo)]

rules

  normalize-messages = topdown(try(normalize-message))

  // create default error message
  normalize-message:
    DefaultMessage() ->
      Message(Error(),Default(),DefaultTermIndex())

  normalize-message:
    Message(kind,msg,NAME()) ->
      Message(kind,msg,NAMEWithOrigin())

rules

  normalize-indices = topdown(try(normalize-occurrence-index <+ normalize-default-index))

  // get index from occurrence, if name is from AST
  normalize-occurrence-index:
    Occurrence(ns,name,DefaultOccurrenceIndex()) ->
      Occurrence(ns,name,OccurrenceIndexFrom(name))

  // get index from matched term
  normalize-default-index:
    DefaultTermIndex() -> TermIndexFrom(<term-var>)
