module nabl2/lang/coq/phases/explicate-wildcards

imports
	nabl2/lang/util/-

  signatures/nabl2/lang/modules/-
  signatures/nabl2/lang/rules/-
  signatures/nabl2/lang/common/-
  signatures/nabl2/shared/common/-

rules // Wildcard explication

	// FIXME: how to prettyprint?
	explicate-module-wildcards:
		(_, _, ast, path, project-path) -> (filename, result)
		with
    	Module(name, decls) := ast;
      filename := <src-gen-file(|project-path, "explicated-wildcards", ".aterm")> name;
			result := <explicate-wildcards> ast

	explicate-wildcards =
		alltd(explicate-rule-wildcards)

	explicate-rule-wildcards:
		CGenInitRule(spatterns, typattern, body) ->
			CGenInitRule(
				<alltd(explicate-scope-pattern-wildcards)> spatterns,
				<alltd(explicate-type-pattern-wildcards)> typattern,
				<alltd(explicate-body-wildcards)> body
			)
		where
			// Reset counters
			rules(wld-sname: _ -> 0);
			rules(wld-tyname: _ -> 0);
			rules(wld-trname: _ -> 0)

	explicate-rule-wildcards:
		CGenMatchRule(name, trpattern, spatterns, typattern, body) ->
			CGenMatchRule(name,
				<alltd(explicate-term-pattern-wildcards)> trpattern,
				<alltd(explicate-scope-pattern-wildcards)> spatterns,
				<alltd(explicate-type-pattern-wildcards)> typattern,
				<alltd(explicate-body-wildcards)> body
			)
		where
			// Reset counters
			rules(wld-sname: _ -> 0);
			rules(wld-tyname: _ -> 0);
			rules(wld-trname: _ -> 0)

	explicate-body-wildcards:
		CGenRecurse(name, trpattern, spatterns, typattern) ->
			CGenRecurse(name,
				<alltd(explicate-term-pattern-wildcards)> trpattern,
				<alltd(explicate-scope-pattern-wildcards)> spatterns,
				<alltd(explicate-type-pattern-wildcards)> typattern)
	
	explicate-term-pattern-wildcards:
		Wld() -> x
		where
			w := <wld-sname; inc>;
			rules(wld-trname: _ -> w);
			x := Var(<conc-strings> ("x", <write-to-string> w))
	
	explicate-scope-pattern-wildcards:
		Wld() -> x
		where
			w := <wld-sname; inc>;
			rules(wld-sname: _ -> w);
			x := Var(<conc-strings> ("s", <write-to-string> w))
	
	explicate-type-pattern-wildcards:
		Wld() -> x
		where
			w := <wld-tyname; inc>;
			rules(wld-tyname: _ -> w);
			x := Var(<conc-strings> ("t", <write-to-string> w))
	