module nabl2/lang/coq/analysis/dependencies

imports
	nabl2/lang/coq/util/maybe-list
	nabl2/lang/coq/util/mbind-err
	nabl2/lang/coq/query
	
	signatures/nabl2/lang/rules/CGen-sig
  signatures/nabl2/shared/common/-

rules // Dependency analysis

	mdeps:
		[r|rs] ->
			<mdep;
			mbind(\ depsr ->
			<mdeps;
			mbind(\ depsrs ->
			<cons-if-some> (depsr, depsrs) \)> rs \)> r

	mdeps:
		[] -> []

	mdep:
		CGenInitRule(_, _, body) -> None()
	
	mdep:
		CGenMatchRule(name, _, _, _, body) ->
			x'
			with
			x':=
			<get-name;
			mbind(\ name' ->
			<mdeps-body(|name')> body \)> name
	
	mdep:
		x ->
			<concat-strings; err>
				["Mutual dependency analysis encountered an unexpected rule kind:",
					<write-to-string> x, ". Please report."]
		where
			not(?CGenInitRule(_, _, _) <+ ?CGenMatchRule(_, _, _, _, _))
	
	mdeps-body(|name):
		[b|bs] ->
			x
			with
			x:=
			<mdep-body(|name);
			mbind(\ depsb ->
			<mdeps-body(|name);
			mbind(\ depsbs ->
			<cons-if-some> (depsb, depsbs) \)> bs \)> b
	
	mdeps-body(|name):
		[] -> []
	
	mdep-body(|name):
		CGenRecurse(name0, _, _, _) ->
			<get-name;
			mbind(\ name' ->
			<if <equal> (name, name')
			 then !None()
			 else !(name, name')
			 end>
			\)> name0

	mdep-body(|name):
		x -> None()
		where
			not(?CGenRecurse(_, _, _, _))
