module nabl2/lang/coq/main

imports
	libstrc
	libstratego-gpp
  nabl2/lang/util/-
  nabl2/lang/analysis/normalize
  nabl2/lang/analysis/signatures
    
  // NaBL2 imports:
  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-
  signatures/nabl2/lang/common/-
  signatures/nabl2/lang/signatures/-
  signatures/nabl2/lang/rules/-
  
  // Coq imports:
  nabl2/lang/coq/analysis/explicate-wildcards
  nabl2/lang/coq/analysis/dependencies
  nabl2/lang/coq/util/maybe-list
  nabl2/lang/coq/util/mbind-err
  nabl2/lang/coq/query
  signatures/Vernacular-sig
  signatures/Gallina-sig
  signatures/Options-sig
  
  // Coq pp
	pp/Coq-parenthesize
	pp/Coq-pp

rules // Constant(s)

	coq-list-name = !"list"
	
	cgref         = !"scopeofRef"
	cgdecl        = !"scopeofDecl"
	cresolve      = !"rlookup"
	ctypeof       = !"typofDecl"
	cgdirectedge  = !"edgeofScope"
	cdeclsofscope = !"declsofScope" // FIXME: in NaBL2, these are indexed by namespaces. In Coq, they are not (currently)
	crefsofscope  = !"refsofScope" // FIXME: in NaBL2, these are indexed by namespaces. In Coq, they are not (currently)
	cassocscopeofdecl = !"assocScope" // FIXME: in NaBL2, these are labeled. In Coq, they are not (currently)
	csub          = !"sub_trans"
	csubseteq     = !"subset_eq" // FIXME: what should this really map to?
	
	p-edge        = !"P"
	i-edge        = !"I"
	
	get-occ       = !"getOccurrence"

rules

  generate-coq:
    (_, _, ast, path, project-path) -> (filename, result)
    with
    	Module(name, decls) := ast;
      filename := <src-gen-file(|project-path, "nabl2", ".v")> name;
      // Pre-processing
      decls' := <explicate-wildcards> decls;
      imps := <filter(?Imports(<id>)); concat> decls';
      sigs := <filter(?Signature(<id>)); concat> decls';
      ruls := <filter(?Rules(<id>)); concat> decls';
      result :=
      	//  Calculate dependencies between constraint generation rules
      	<normalize-rules;
      	mbind(\ ruls' ->
      	<mdeps;
      	mbind(\ deps ->
	      // Generate syntax and rule types based on signatures
	     	<sigs-to-coq; 
	      mbind(\ coq_defs ->
	     	// Augment definitions with generated rules
	     	<rules-to-coq;
	     	mbind(\ coq_defs' ->
	    	// Transform based on dependencies between rules (definition-before-use)
	     	<foldl(\
	    		((x, y), coq2) ->
	    			<join-induc-defs> (x, y, coq2) \);
	    	mbind(\ coq1 ->
	    	// Pretty-print
	    	<parenthesize-Coq; prettyprint-Coq; box2text-string(|100)> coq1
	    	\)> (<concat> deps, coq_defs')
	     	\)> (ruls', coq_defs)
	     	\)> sigs
	     	\)> ruls'
	     	\)> ruls

rules // Signatures

	sigs-to-coq:
		sigs ->
			<sigs-to-coql;
				mbind(\
					coq-sigs -> <concat> coq-sigs
				\)> sigs

	sigs-to-coql:
 		[x|xs] ->
 			<sig-to-coq;
 			mbind(\ y ->
 			<sigs-to-coql;
 			mbind(\ xs' ->
 			<cons-if-some> (y, xs') \)> xs \)> x
 	
 	sigs-to-coql:
 		[] -> []
 	
 	sig-to-coq:
 		CGen(cs) ->
 			<cgen-sigs-to-coq> cs
 	
 	sig-to-coq:
 		Constructors(ts) ->
 			<opdecls-to-coq;
 			mbind(\ ts' ->
 			[Inductive([Induc("T", None(), Type(),
 				ListDeclBar(ts'))])] \)> ts

	sig-to-coq:
		NameResolution(_) ->
			[]

 	sig-to-coq:
 		x ->
 			<concat-strings; err> ["Encountered an unexpected declaration: ",
 				<write-to-string> x, ". Please report."]
 		where
 			not(?CGen(_) <+
 				?Constructors(_) <+
 				?NameResolution(_))

rules	// Constraint generation signatures

	cgen-sigs-to-coq:
		[csig|csigs] ->
			<cgen-sig-to-coq;
			mbind(\ coqsig' ->
			<cgen-sigs-to-coq;
			mbind(\ coqsigs' ->
			<cons-if-some> (coqsig', coqsigs')
			\)> csigs \)> csig

	cgen-sigs-to-coq:
		[] -> []

	cgen-sig-to-coq:
		CGenSig(name, trsort, ssorts, tysort) ->
			x''
			with
			x'':=
			<get-name;
				mbind(\ name' ->
				<postify-term-sort;
				mbind(\ trsort' ->
				<term-sort-to-coq;
				mbind(\ trsort'' ->
//				<append-if-some; foldr(!Prop(),
//					\ (x, y) ->
//						<mbind(\ y' ->
//						<type-sort-to-coq;
//						mbind(\ x' ->
//						Arrow(x', y')
//						\)> x \)> y \);
//				mbind(\ srts' ->
				Inductive([Induc(<cgen-rename> name', None(),
					Arrow(trsort'', Prop()), None())])
//					\)> (ssorts, tysort)
					\)> trsort'
					\)> trsort
					\)> name
	
	cgen-sig-to-coq:
		x ->
			<concat-strings; err> ["Encountered an unexpected constraint generation signature: ",
				<write-to-string> x, ". Please report."]
		where
			not(?CGenSig(_, _, _, _))

rules // Type signatures

	opdecls-to-coq:
		[tsig|tsigs] ->
			<opdecl-to-coq;
				mbind(\ y ->
				<opdecls-to-coq;
				mbind(\ tsigs' ->
				<cons-if-some> (y, tsigs') \)> tsigs \)> tsig

	opdecls-to-coq:
		[] -> []

  opdecl-to-coq:
    OpDecl(tname, tparams, tsort@TypeSort()) -> 
			<foldr(!<type-sort-to-coq> tsort,
					\ (x, y) ->
						<mbind(\ z ->
						<type-sort-tuple-to-coq;
						mbind(\ x' ->
						Arrow(x', z)
						\)> x \)> y \);
			mbind(\ t ->
			ConsDecl(tname, None(),
				OptType(t)) \)> tparams
	
	opdecl-to-coq:
		x ->
			<concat-strings; err>
				["Encountered unexpected type signature: ",
					<write-to-string> x, ". Please report."]
		where
			not(?OpDecl(_, _, TypeSort()))

rules // NaBL2 sorts

	type-sort-tuple-to-coq:
		tuple@(_, sort) ->
			<type-sort-to-coq> sort
		where
			<TupleToList> tuple // FIXME: This works around a bug in the Stratego interpreter where terms of arity 2 are matched as if they were tuples

	type-sort-to-coq:
		SortNoArgs(name) -> Ref(name)
	
	type-sort-to-coq:
		TypeSort() -> Ref("T")

	type-sort-to-coq:
		ScopeSort() -> Ref("ScopeId")
	
	type-sort-to-coq:
		ListSort(sort) -> 
			Apply(Ref(<coq-list-name>), <type-sort-to-coq> sort)

  type-sort-to-coq:
    OccurrenceSort() ->
      Ref("O")
	
	type-sort-to-coq:
		"s" -> Ref("ScopeId")

	type-sort-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected type sort: ", 
					<write-to-string> x, ". Please report."]
	where
		not(?SortNoArgs(_) <+
			?TypeSort() <+
			?ScopeSort() <+
			?ListSort(_) <+
			?OccurrenceSort() <+
			?"s")
	
	term-sort-to-coq:
		SortNoArgs(name) ->
			Ref(name)
	
	term-sort-to-coq:
		ListSort(sort) ->
			Apply(Ref(<coq-list-name>), <term-sort-to-coq> sort)
	
	term-sort-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected term sort: ", 
					<write-to-string> x, ". Please report."]
		where
			not(?SortNoArgs(_) <+ ?ListSort(_))

rules // Rule normalization

  normalize-rules:
  	[r|rs] ->
  		<normalize-rule;
  			mbind(\ rule' ->
  			<normalize-rules;
  			mbind(\ rules' ->
  			<cons-if-some> (rule', rules')
  			\)> rs
  			\)> r
  			
  normalize-rules:
  	[] -> []
  	
  normalize-rule:
  	CGenInitRule(spattern, tpattern, body) ->
  		<extract-scope-patterns;
  			mbind(\ (spattern', body0) ->
  			<extract-type-pattern;
  			mbind(\ (tpattern', body') ->
  			CGenInitRule(spattern', tpattern', body')
  			\)> (tpattern, body0)
  			\)> (spattern, body)
  
  normalize-rule:
  	CGenMatchRule(name, term_pattern, spattern, tpattern, body) ->
  		<extract-term-pattern;
  			mbind(\ (term_pattern', body0) ->
  			<extract-scope-patterns;
  			mbind(\ (spattern', body1) ->
  			<extract-type-pattern;
  			mbind(\ (tpattern', body2) ->
  			<normalize-body;
  			mbind(\ body' ->
  			CGenMatchRule(name, term_pattern', spattern', tpattern', body')
  			\)> body2
  			\)> (tpattern, body1)
  			\)> (spattern, body0)
  			\)> (term_pattern, body)
  
  normalize-rule:
  	x ->
  		<concat-strings; err>
  			["Rule normalization encountered an unexpected rule kind: ",
  				<write-to-string> x, ". Please report."]
  	where
  		not(?CGenInitRule(_, _, _) <+
  			?CGenMatchRule(_, _, _, _, _))

	// Iterate through clauses of body to look for normalization opportunities
	normalize-body:
		[] -> []
	
	normalize-body:
		[c|cs] ->
			<normalize-clause;
			mbind(\ cs0 ->
			<normalize-body;
			mbind(\ cs' ->
			<conc> (cs0, cs')
			\)> cs
			\)> c
			
	normalize-clause:
		c -> [c]
		where
			not(?CSubsetEq(_, _, _, _))
			
	normalize-clause:
		CSubsetEq(set1, proj, set2, error_msg) ->
			[CEqual(Var(var1), set1, DefaultMessage()),
			 CEqual(Var(var2), set2, DefaultMessage()),
			 CSubsetEq(Var(var1), proj, Var(var2), error_msg)]
		where
			var1 := <newname> "set";
			var2 := <newname> "set"

rules // Normalize scope patterns by making "as" patterns into equalities in the body of a rule

  extract-scope-patterns:
  	(Tuple(sps), body) ->
  		<extract-scope-pattern-list;
			mbind(\ (sps', body') ->
				Tuple(sps', body')
			\)> (sps, body)
	
	extract-scope-patterns:
		(x, body) ->
			<concat-strings; err>
				["Rule normalization encountered an unexpected scope pattern kind: ",
					<write-to-string> x, ". Please report."]
		where
			not(?Tuple(_))
	
	extract-scope-pattern-list:
		([spat|spats], body) ->
			<extract-scope-pattern;
			mbind(\ (spat', body0) ->
			<extract-scope-pattern-list;
			mbind(\ (spats', body') ->
			<cons-if-some;
			mbind(\ spats_final ->
			(spats_final, body)
			\)> (spat', spats')
			\)> (spats, body)
			\)> (spat, body)
	
	extract-scope-pattern-list:
		([], body) ->
			([], body)
	
	extract-scope-pattern:
		(Var(s), body) -> (Var(s), body)

	extract-scope-pattern:
		(As(Var(x), sterm), body) ->
			<extract-scope-pattern;
			mbind(\ (sterm', body') ->
				(sterm', [CEqual(Var(x), sterm', DefaultMessage())|body'])
			\)> (sterm, body)		

	extract-scope-pattern:
		(x, _) ->
			<concat-strings; err>
				["Encountered an unexpected scope pattern: ",
					<write-to-string> x, ". Please report."]
		where
			not(?Var(_) <+
				?As(_, _))

rules // Normalize type patterns by making "as" patterns into equalities in the body of a rule
	
//	  do (spat', body0) := <extract-type-pattern> (spat, body);
//		   (spats', body') := <extract-type-pattern-list> (spats, body);
//		   spats_final := <cons-if-some> (spat, spats');
//		   return (spats_final, body')	
	
	extract-type-pattern-list:
		([spat|spats], body) ->
			<extract-type-pattern;
			mbind(\ (spat', body0) ->
			<extract-type-pattern-list;
			mbind(\ (spats', body') ->
			<cons-if-some;
			mbind(\ spats_final ->
			(spats_final, body)
			\)> (spat', spats')
			\)> (spats, body)
			\)> (spat, body)
	
	extract-type-pattern-list:
		([], body) ->
			([], body)

	extract-type-pattern:
		(Var(s), body) -> (Var(s), body)

	extract-type-pattern:
		(Type(t), body) ->
			<extract-type-pattern;
			mbind(\ (t', body') -> (Type(t'), body') \)> (t, body)

	extract-type-pattern:
		(NoType(), body) ->
			(NoType(), body)

	extract-type-pattern:
		(Op(name, args), body) ->
			<extract-type-pattern-list;
			mbind(\ (args', body') -> (Op(name, args'), body') \)> (args, body)

	extract-type-pattern:
		(As(Var(x), sterm), body) ->
			<extract-type-pattern;
			mbind(\ (sterm', body') ->
				(sterm', [CEqual(Var(x), sterm', DefaultMessage())|body'])
			\)> (sterm, body)		

	extract-type-pattern:
		(CList(ts), body) ->
			<extract-type-pattern-list;
			mbind(\ (ts', body') -> (CList(ts'), body') \)> (ts, body)

	extract-type-pattern:
		(CListTail(theads,tl), body) ->
			<extract-type-pattern-list;
			mbind(\ (theads', body0) ->
			<extract-type-pattern;
			mbind(\ (tl', body') ->
			(CListTail(theads', tl'), body')
			\)> (tl, body)
			\)> (theads, body)

	extract-type-pattern:
		(x, _) ->
			<concat-strings; err>
				["Encountered an unexpected type pattern: ",
					<write-to-string> x, ". Please report."]
		where
			!x; 
			not(?Var(_) <+
				?Op(_, _) <+
				?Type(_) <+
				?CList(_) <+
				?CListTail(_, _) <+
				?As(_, _))
	
rules // Normalize term patterns by making "as" patterns into equalities in the body of a rule
	
	extract-term-pattern-list:
		([spat|spats], body) ->
			<extract-term-pattern;
			mbind(\ (spat', body0) ->
			<extract-term-pattern-list;
			mbind(\ (spats', body') ->
			<cons-if-some;
			mbind(\ spats_final ->
			(spats_final, body)
			\)> (spat', spats')
			\)> (spats, body)
			\)> (spat, body)
	
	extract-term-pattern-list:
		([], body) ->
			([], body)
	
	extract-term-pattern:
		(Var(s), body) -> (Var(s), body)

	extract-term-pattern:
		(As(Var(x), sterm), body) ->
			<extract-term-pattern;
			mbind(\ (sterm', body') ->
				(sterm', [CEqual(Var(x), sterm', DefaultMessage())|body'])
			\)> (sterm, body)		
	
	extract-term-pattern:
		(Op(name, args), body) ->
			<extract-term-pattern-list;
			mbind(\ (args', body') -> (Op(name, args'), body') \)> (args, body)
	
	extract-term-pattern:
		(List(list), body) ->
			<extract-term-pattern-list;
			mbind(\ (list', body') ->
			(List(list'), body') \)> (list, body)
	
	extract-term-pattern:
		(ListTail(heads, tail), body) ->
			<extract-term-pattern-list;
			mbind(\ (heads', body0) ->
			<extract-term-pattern;
			mbind(\ (tail', body') ->
			(ListTail(heads', tail'), body')
			\)> (tail, body0) 
			\)> (heads, body)
	
	extract-term-pattern:
		(As(var, instance), body) ->
			<extract-term-pattern;
			mbind(\ (instance', body') ->
				(var, [CEqual(var, instance', DefaultMessage())|body'])
			\)> (instance, body)
	
	extract-term-pattern:
		(x, _) ->
			<concat-strings; err>
				["Encountered an unexpected term pattern: ",
					<write-to-string> x, ". Please report."]
		where
			!x;
			not(?Var(_) <+
				?Op(_, _) <+
				?List(_) <+
				?As(_, _))

rules // Rules

	rules-to-coq:
		([r|rs], coq) ->
			<rule-to-coq;
			mbind(\ coq' ->
			<rules-to-coq> (rs, coq') \)> (r, coq)
	
	rules-to-coq:
		([], coq) -> coq

	// Ignored, for now...
	rule-to-coq:
		(CGenInitRule(spattern, tpattern, body), coq) ->
			coq
	
	rule-to-coq:
		(r@CGenMatchRule(name, trpattern, spattern, typattern, body), coq) ->
			<collect-all(\ Var(x) -> Bind(x) \);
			mbind(\ var_names ->
			<rule-name-from-term-pattern;
			mbind(\ rname ->
			<term-pattern-to-coq;
			mbind(\ trpattern' ->
			<get-name;
			mbind(\ cgen_name ->
			<scope-patterns-to-coq;
			mbind(\ spattern' ->
			<type-pattern-to-coq;
			mbind(\ typattern' ->
			<cgen-body-to-coq;
			mbind(\ body' ->
			<alltd(\
			Induc(coq_name, x, ty, cs) ->
				Induc(coq_name, x, ty,
					<append-constructor>
						(cs, ConsDecl(rname,
							OptBinders(var_names), // Binders -- FIXME
							OptType(
								<foldr(
								  !
									Apply(Ref(coq_name),
										<foldr(!Ref(post_c),
											\ (x, y) -> Apply(y, x) \)>
												[trpattern', typattern'|<reverse> spattern']),
									\ (x, y) -> ArrowLn(x, y) \)> body'))))
				where
					<equal> (<cgen-rename> cgen_name, coq_name);
					Arrow(Ref(post_sort), Prop()) := ty;
					post_c := <rename-post-sort-to-post-constructor> post_sort
				 \)> coq
			\)> body
			\)> typattern
			\)> spattern
			\)> name
			\)> trpattern
			\)> (name, trpattern)
			\)> r
	
	rule-to-coq(|sigs):
		(r, _) -> 
			<concat-strings; err>
				["Encountered an unexpected rule kind: ",
					<write-to-string> r, ". Please report."]
		where
			not(!r;
				?CGenInitRule(_, _, _) <+
				?CGenMatchRule(_, _, _, _, _))

	// Converts a None() to a ListDeclBar if necessary,
	// and appends the constructor
	append-constructor:
		(None(), c) ->
			ListDeclBar([c])

	append-constructor:
		(ListDeclBar(cs), c) ->
			ListDeclBar(<conc> (cs, [c]))

rules // Rule naming

	rule-name-from-term-pattern:
		(rname, Op(cname, _)) ->
			<get-name;
			mbind(\ name -> 
			<conc-strings> (name, cname)
			\)> rname
			
	rule-name-from-term-pattern:
		(rname, List([])) ->
			<get-name;
			mbind(\ name ->
			<conc-strings> (name, "Nil")
			\)> rname
			
	rule-name-from-term-pattern:
		(rname, List([_|_])) ->
			<get-name;
			mbind(\ name ->
			<conc-strings> (name, "Cons")
			\)> rname
	
	rule-name-from-term-pattern:
		(rname, ListTail(_, _)) ->
			<get-name;
			mbind(\ name ->
			<conc-strings> (name, "Cons")
			\)> rname
	
	rule-name-from-term-pattern:
		(rname, x) ->
			<concat-strings; err>
				["Encountered an unexpected term kind during rule name generation: ",
					<write-to-string> x, ". Please report."]
		where
			not(!x;
				?Op(_, _) <+
				?List([]) <+
				?List([_|_]) <+
				?ListTail)

rules // Term patterns

	term-pattern-to-coq:
		Op(cname, params) ->
			<reverse; foldr(!Ref(cname),
				\ (param, coq_term) ->
					<term-pattern-to-coq;
					mbind(\ t' -> Apply(coq_term, t') \)> param \)> params
	
	term-pattern-to-coq:
		List(lst) ->
			<list-pattern-to-coq> lst
			
	term-pattern-to-coq:
		ListTail(heads, tail) ->
			<list-pattern-to-coq(|tail)> heads
	
	term-pattern-to-coq:
		CList(lst) ->
			<list-pattern-to-coq> lst
			
	term-pattern-to-coq:
		CListTail(heads, tail) ->
			<list-pattern-to-coq(|tail)> heads
	
	term-pattern-to-coq:
		Var(x) -> Ref(x)
	
	term-pattern-to-coq:
		Declarations(t, namespace) ->
			<term-pattern-to-coq;
			mbind(\ t' ->
			<namespace-to-coq;
			mbind(\ namespace' ->
			Apply(Apply(<cdeclsofscope>, t'), namespace')
			\)> namespace
			\)> t
	
	term-pattern-to-coq:
		References(t, namespace) ->
			<term-pattern-to-coq;
			mbind(\ t' ->
			<namespace-to-coq;
			mbind(\ namespace' ->
			Apply(Apply(<crefsofscope>, t'), namespace')
			\)> namespace
			\)> t
		
	term-pattern-to-coq:
		Str(str) ->
			str
		
  // FIXME: This converts a tuple into a list. Is this what we want?
	term-pattern-to-coq:
	  Tuple(xs) ->
	    <list-pattern-to-coq> xs
		
  term-pattern-to-coq:
    o@Occurrence(_, _, _) ->
      <occurrence-to-coq> o
		
	term-pattern-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected term: ",
					<write-to-string> x, ". Please report."]
		where
			not(?Op(_, _) <+
				?List(_) <+
				?ListTail(_, _) <+
				?CList(_) <+
				?CListTail(_, _) <+
				?Declarations(_, _) <+
				?Var(_) <+
				?Tuple(_) <+
				?Occurrence(_, _, _))

rules // Scope patterns

	scope-patterns-to-coq:
		Tuple(sps) ->
			<scope-pattern-list-to-coq> sps

	scope-patterns-to-coq:
		sps ->
			<scope-pattern-list-to-coq> sps
		where
			is-list

	scope-patterns-to-coq:
		x ->
			<concat-strings; err>
				["Encountered unexpected scope patterns: ", <write-to-string> x, ". Please report."]
	where
		not(?Tuple(_) <+
			is-list)

	scope-pattern-list-to-coq:
		[sp|sps] ->
			<scope-pattern-to-coq;
			mbind(\ sp' ->
			<scope-pattern-list-to-coq;
			mbind(\ sps' ->
			[sp'|sps']
			\)> sps
			\)> sp
	
	scope-pattern-list-to-coq:
		[] -> []

	scope-pattern-to-coq:
		Var(s) -> Ref(s)

  scope-pattern-to-coq:
    o@Occurrence(_, _, _) ->
      <occurrence-to-coq> o

	scope-pattern-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected scope annotation: ",
					<write-to-string> x, ". Please report."]
		where
			not(?Var(_))

rules // Type pattern

	type-pattern-to-coq:
		Type(x) ->
			<term-pattern-to-coq> x
	
	type-pattern-to-coq:
		NoType() ->
			Ref("tt") // FIXME
	
	type-pattern-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected type annotation: ",
					<write-to-string> x, ". Please report."]

rules // CGen body

	cgen-body-to-coq:
		[c|cs] ->
			x with x:=
			<cgen-clause-to-coq;
			mbind(\ c' ->
			<cgen-body-to-coq;
			mbind(\ cs' ->
			<conc-if-some> (c', cs')
			\)> cs
			\)> c

	cgen-body-to-coq:
		[] -> []

	cgen-clause-to-coq:
		CTrue(_) -> None()
		
	cgen-clause-to-coq:
		CGRef(occ, s, _) ->
			<occurrence-to-coq;
			mbind(\ occ' ->
			<term-pattern-to-coq;
			mbind(\ s' ->
			[Apply(Apply(Ref(<cgref>), occ'), s')]
			\)> s
			\)> occ

	cgen-clause-to-coq:
		CGDecl(occ, s, _) ->
			<occurrence-to-coq;
			mbind(\ occ' ->
			<term-pattern-to-coq;
			mbind(\ s' ->
			[Apply(Apply(Ref(<cgdecl>), occ'), s')]
			\)> s
			\)> occ

	
	cgen-clause-to-coq:
		CResolve(occ1, occ2, _) ->
			<occurrence-to-coq;
			mbind(\ occ1' ->
			<occurrence-to-coq;
			mbind(\ occ2' ->
			[Apply(Apply(Ref(<cresolve>), occ1'), occ2')]
			\)> occ2
			\)> occ1 
			
	cgen-clause-to-coq:
		CDeclType(occ, t, _, _) ->
			<occurrence-to-coq;
			mbind(\ occ' ->
			<term-pattern-to-coq;
			mbind(\ t' ->
			[Apply(Apply(Ref(<ctypeof>), occ'), t')]
			\)> t
			\)> occ
	
	cgen-clause-to-coq:
		CGenRecurse(name, trpattern, spatterns, typattern) ->
			<get-name;
			mbind(\ name' ->
			<term-pattern-to-coq;
			mbind(\ trpattern' ->
			<scope-patterns-to-coq;
			mbind(\ spatterns' ->
			<type-pattern-to-coq;
			mbind(\ typattern' ->
			[Apply(Ref(<cgen-rename> name'), trpattern'),
			Parenthetical(Eq(Apply(Ref(<conc-strings> ("proj_", name')), trpattern'),
				<foldr(!Ref("nil"),
					\ (x, y) -> Apply(Apply(Ref("cons"), x), y) \)>
				<conc> (spatterns', [typattern'])))]
			\)> typattern
			\)> spatterns
			\)> trpattern
			\)> name
	
	cgen-clause-to-coq:
		CGDirectEdge(s1, lbl, s2, _) ->
			<term-pattern-to-coq;
			mbind(\ s1' ->
			<label-pattern-to-coq;
			mbind(\ lbl' ->
			<term-pattern-to-coq;
			mbind(\ s2' ->
			[Apply(Apply(Apply(Ref(<cgdirectedge>), s1'), lbl'), s2')]
			\)> s2
			\)> lbl
			\)> s1
		
	// FIXME: do we need this information in Coq?
	cgen-clause-to-coq:
		NewScopes(_) -> None()
	
	// FIXME: do we need this information in Coq?
	cgen-clause-to-coq:
		CDistinct(_, _, _) -> None()
	
	cgen-clause-to-coq:
		CEqual(x, y, _) ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<term-pattern-to-coq;
			mbind(\ y' ->
			[Eq(x', y')] \)> y \)> x    
	
	// FIXME: Subtyping should be semantic
	cgen-clause-to-coq:
		CCheckRel(x, DefaultRelation(), y, msg) ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<term-pattern-to-coq;
			mbind(\ y' ->
			[Apply(Apply(Ref(<csub>), x'), y')]
			\)> y
			\)> x 
	
	cgen-clause-to-coq:
		CBuildRel(x, DefaultRelation(), y, msg) ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<term-pattern-to-coq;
			mbind(\ y' ->
			[Apply(Apply(Ref(<csub>), x'), y')]
			\)> y
			\)> x
			
	cgen-clause-to-coq:
		CSubsetEq(x, proj, y, msg) ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<term-pattern-to-coq;
			mbind(\ y' ->
			[Apply(Apply(Ref(<csubseteq>), x'), y')]
			\)> y
			\)> x
	
	cgen-clause-to-coq:
		CGAssoc(x, lbl, scope, _) ->
			<occurrence-to-coq;
			mbind(\ x' ->
			<label-pattern-to-coq;
			mbind(\ lbl' ->
			<term-pattern-to-coq;
			mbind(\ scope' ->
			[Apply(Apply(Apply(Ref(<cassocscopeofdecl>), x'), lbl'), scope')]
			\)> scope
			\)> lbl
			\)> x
	
	cgen-clause-to-coq:
		CAssoc(x, lbl, scope, _) ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<label-pattern-to-coq;
			mbind(\ lbl' ->
			<term-pattern-to-coq;
			mbind(\ scope' ->
			[Apply(Apply(Apply(Ref(<cassocscopeofdecl>), x'), lbl'), scope')]
			\)> scope
			\)> lbl
			\)> x
	
	// FIXME: This assumes that constraint goals map onto pre-defined Coq types
	//        Is this what we want?
	cgen-clause-to-coq:
	  CGoal(x,_) ->
	   <term-pattern-to-coq;
	   mbind(\ x -> [x] \)> x
	
  // FIXME: This assumes that constraint goals map onto pre-defined Coq types
  //        Is this what we want?
  cgen-clause-to-coq:
    CFact(x,_) ->
     <term-pattern-to-coq;
     mbind(\ x -> [x] \)> x
  
	cgen-clause-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected clause: ",
					<write-to-string> x, ". Please report."]
		where
			not(?CTrue(_) <+
				?CGRef(_, _, _) <+
				?CResolve(_, _, _) <+
				?CDeclType(_, _, _, _) <+
				?CGenRecurse(_, _, _, _) <+
				?CGDirectEdge(_, _, _, _) <+
				?NewScopes(_) <+
				?CDistinct(_, _, _) <+
				?CGAssoc(_, _, _, _) <+
				?CAssoc(_, _, _, _) <+
				?CEqual(_, _, _) <+
				?CCheckRel(_, _, _, _) <+
				?CBuildRel(_, _, _, _) <+
				?CSubsetEq(_, _, _, _) <+
				?CGoal(_,_) <+
				?CFact(_,_))

rules // Label

	label-pattern-to-coq:
		P() -> Ref(<p-edge>)
	
	label-pattern-to-coq:
		I() -> Ref(<i-edge>)
	
	label-pattern-to-coq:
		Label(x) -> Ref(x)
	
	label-pattern-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected label pattern: ",
					<write-to-string> x, ". Please report."]
		where
			not(?P())

rules // Occurrence
	
	// FIXME: This naive notion of occurrence disregards namespaces, for now
	occurrence-to-coq:
		Occurrence(_, x, _) ->
			Apply(Ref(<get-occ>), <term-pattern-to-coq> x)
	
	occurrence-to-coq:
		Var(x) -> Ref(x)
	
	occurrence-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected occurrence: ",
					<write-to-string> x, ". Please report."]
		where
			not(?Occurrence(_, _, _) <+
				?Var(_))

rules // Namespace

	namespace-to-coq:
		Namespace(str_name) ->
			Ref(<conc-strings> ("NS", str_name))
			
	namespace-to-coq:
		x ->
			<concat-strings; err>
				["Encountered an unexpected namespace identifier: ", x, ". Please report."]
		where
			not(?Namespace(_))

rules // Lists

	list-pattern-to-coq:
		[] -> Ref("nil")
	
	list-pattern-to-coq:
		[x|xs] ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<list-pattern-to-coq;
			mbind(\ xs' ->
			Apply(Apply(Ref("cons"), x'), xs')
			\)> xs
			\)> x

	list-pattern-to-coq:
		x ->
			<concat-strings; err>
				["Encountered term where a list was expected during",
					" list pattern generation: ", <write-to-string> x]
		where
			not(?[] <+ ?[_|_])

	list-pattern-to-coq(|last_elem):
		[] -> <term-pattern-to-coq> last_elem
	
	list-pattern-to-coq(|last_elem):
		[x|xs] ->
			<term-pattern-to-coq;
			mbind(\ x' ->
			<list-pattern-to-coq(|last_elem);
			mbind(\ xs' ->
			Apply(Apply(Ref("cons"), x'), xs')
			\)> xs
			\)> x

	list-pattern-to-coq(|last_elem):
		x ->
			<concat-strings; err>
				["Encountered term where a list was expected during",
					" list pattern generation: ", <write-to-string> x]
		where
			not(?[] <+ ?[_|_])

rules // Postification -- embeds scope/type patterns in term constructors

	postify-term-sort:
		SortNoArgs(sort_name) ->
			SortNoArgs(<conc-strings> ("Post", sort_name))
		
	postify-term-sort:
		ListSort(sort) ->
			<get-sort-name;
			mbind(\ sort' ->
			SortNoArgs(<conc-strings> ("PostL", sort'))
			\)> sort

	postify-term-sort:
		x ->
			<concat-strings; err>
				["Term sort postification encountered an unexpected term sort: ",
					<write-to-string> x, ". Please report."]
		where
			not(?SortNoArgs(_) <+ ?ListSort(_))

	rename-post-sort-to-post-constructor:
		x -> <conc-strings> (x, "_")
		
rules // Joining inductive definitions

	join-induc-defs:
		(name1, name2, coq) ->
			coq'
		with
			// Hoist inductive type out of set of inductive types
			<get-def;
			mbind(\ (inducs2, coq2) ->
				coq'
					where
						name2' := <cgen-rename> name2;
						// Insert dependent definition in definition for dependee
						(
							coq' :=
								<oncetd(\
									Inductive(inducs) ->
										Inductive(<conc> (inducs2, inducs))
										where 
											<fetch(?Induc(name2', _, _, _))> inducs \)> coq2
							<+
							coq' := <conc> (coq2, [Inductive(inducs2)])
						)
			\)> (name1, coq)
	
	get-def:
		(name1, coqdefs) -> (inducs', coqdefs')
		with
			name1' := <cgen-rename> name1;
			// Coq definitions after removing the definition for name1
			coqdefs' := 
				<filter({ inducs:
					not(?Inductive(inducs);
						<fetch(?Induc(name1', _, _, _))> inducs) })> coqdefs;
			// Binds inducs' to the definition for name1
			<alltd({ inducs:
				?Inductive(inducs);
				<fetch({x,y,z: ?Induc(name1', x, y, z) })> inducs;
				inducs' := inducs })> coqdefs

rules // Naming conventions

	cgen-rename:
		x -> <conc-strings> ("CG", x)

rules // Utility for getting first letter of string

	first-letter =
		string-as-chars(\ [x|_] -> <upper-case-chars> [x] \) <+
		?str;
		<concat-strings; err>
			["Expected a non-empty string, but was given: ",
				<write-to-string> str]
